function createScope(){return currentSpec.$injector.get("$rootScope").$new()}function getMessages(){var a=arguments,b=format.apply(this,a);return function(){return[b.replace(" {not}",""),b.replace("{not}","not")]}}function format(a){for(var b=a,c=1;c<arguments.length;c++)b=b.replace(new RegExp("\\{"+(c-1)+"\\}","g"),jasmine.pp(arguments[c]));return b}function createPromiseWith(a,b,c){if(createScope().$digest(),a.callCount){var d=a.mostRecentCall.args[0];return this.message=getMessages("Expected promise {not} to have been "+c+" with {0} but was "+c+" with {1}",b,d),_.isFunction(b)?(b(d),a.calls.length>0):angular.equals(d,b)}return this.message=getMessages("Expected promise {not} to have been "+c+" with {0} but was not "+c+" at all",b),!1}function toResolve(){var a=jasmine.createSpy("Promise success callback");return this.actual.then(a,noop),createScope().$digest(),this.message=getMessages("Expected promise {not} to have been resolved"),a.calls.length>0}function toResolveWith(a){var b=jasmine.createSpy("Promise success callback");return this.actual.then(b),createPromiseWith.call(this,b,a,"resolved")}function toReject(){var a=jasmine.createSpy("Promise failure callback");return this.actual["catch"](a),createScope().$digest(),this.message=getMessages("Expected promise {not} to have been rejected"),a.calls.length>0}function toRejectWith(a){var b=jasmine.createSpy("Promise failure callback");return this.actual["catch"](b),createPromiseWith.call(this,b,a,"rejected")}var currentSpec;beforeEach(function(){currentSpec=this});var matchers={toBePromise:function(){return this.message=getMessages("Expected object {0} to be a promise",this.actual),this.actual&&_.isFunction(this.actual.then)},toResolve:toResolve,toResolveWith:toResolveWith,toHaveBeenResolved:toResolve,toHaveBeenResolvedWith:toResolveWith,toReject:toReject,toRejectWith:toRejectWith,toHaveBeenRejected:toReject,toHaveBeenRejectedWith:toRejectWith,toContainIsolateScope:function(a){var b={};return _.each(this.actual.isolateScope(),function(a,c){"this"!==c&&"$"!==c.charAt(0)&&(b[c]=a)}),this.message=getMessages("Expected element isolated scope {not} to contain {0} but got {1}",a,b),_.matches(a)(b)}};beforeEach(function(){this.addMatchers(matchers)});