function createScope(){return currentSpec.$injector.get("$rootScope").$new()}function getNot(a){return a?" not":""}function getResult(a){var b=Array.prototype.slice.call(arguments,1);return{pass:a,message:format.apply(this,b)}}function format(a){for(var b=a,c=1;c<arguments.length;c++)b=b.replace(new RegExp("\\{"+(c-1)+"\\}","g"),jasmine.pp(arguments[c]));return b}function createPromiseWith(a,b,c){createScope().$digest();var d,e;if(a.calls.count()){var f=a.calls.mostRecent().args[0];angular.isFunction(b)?(b(f),d=a.calls.length>0):d=angular.equals(f,b),e="Expected promise"+getNot(d)+" to have been "+c+" with "+jasmine.pp(b)+" but was "+c+" with "+jasmine.pp(f)}else d=!1,e="Expected promise"+getNot(d)+" to have been "+c+" with "+jasmine.pp(b)+" but it was not "+c+" at all";return{pass:d,message:e}}function toResolve(){return{compare:function(a){var b=jasmine.createSpy("Promise success callback");a.then(b),createScope().$digest();var c=b.calls.count()>0;return{pass:c,message:"Expected promise"+getNot(c)+" to have been resolved"}}}}function toResolveWith(){return{compare:function(a,b){var c=jasmine.createSpy("Promise success callback");return a.then(c),createPromiseWith(c,b,"resolved")}}}function toReject(){return{compare:function(a){var b=jasmine.createSpy("Promise failure callback");a["catch"](b),createScope().$digest();var c=b.calls.any();return{pass:c,message:"Expected promise"+getNot(c)+" to have been rejected"}}}}function toRejectWith(){return{compare:function(a,b){var c=jasmine.createSpy("Promise failure callback");return a["catch"](c),createPromiseWith(c,b,"rejected")}}}var currentSpec;beforeEach(function(){currentSpec=this});var matchers={toBePromise:function(){return{compare:function(a){var b=a&&_.isFunction(a.then);return{pass:b,message:format("Expected object {0}"+getNot(b)+" to be a promise",a)}}}},toResolve:toResolve,toResolveWith:toResolveWith,toHaveBeenResolved:toResolve,toHaveBeenResolvedWith:toResolveWith,toReject:toReject,toRejectWith:toRejectWith,toHaveBeenRejected:toReject,toHaveBeenRejectedWith:toRejectWith,toContainIsolateScope:function(){return{compare:function(a,b){var c={};return _.each(a.isolateScope(),function(a,b){"this"!==b&&"$"!==b.charAt(0)&&(c[b]=a)}),{pass:_.matches(b)(c),message:format("Expected element isolated scope"+getNot(pass)+" to contain {0} but got {1}",b,c)}}}}};beforeEach(function(){jasmine.addMatchers(matchers)});